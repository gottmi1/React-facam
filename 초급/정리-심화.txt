1. Hooks 1

리액트 16.8버전부터 새로 추가됨
Hook이 생기기 이전엔 클래스형 컴포넌트를 많이 사용했지만 이후론 함수형 컴포넌트를 많이 사용한다.(Hook을 많이 사용하고 있다)

만들어진 이유 :
컴포넌트 사이에서 상태 로직 재사용이 어렵다
복잡한 컴포넌트들은 이해하기 어렵다

class의 단점을 보완하면서 라이프사이클 등과 관련된 함수를 재사용 가능하게 한다

Hook의 사용 규칙

컴포넌트의 최상위에서 호출 되어야 한다. 반복문,조건문,중첩된 함수에서 Hook을 실행하면 원하지 않는 사이드이펙트들이 일어날 수 있다
함수 컴포넌트에서만 호출해야한다.

정리
Hooks 등장 -> Class의 단점 보완 / 재사용성 강화
사용규칙 -> 최상위에서 호출, 함수형 컴포넌트에서만 쓴다
Class의 State -> 그냥 이런게 있구나 정도만 알고 Hooks를 쓰자


2. Hooks 2

useEffect 
데이터 fetch,구독,DOM수정등 사이드 이펙트를 다룰때 쓴다.

클린 업
구독과 구독 해지,셋인터벌,클리어 등을 한 공간에서 할 수 있게 함

dependency array 
의존성 배열을 줘서 의도대로 실행 가능

3. Hooks 3

커스텀 훅
비슷한 동작을 하는 훅들의 묶음. 재사용 될 여지가 있을 때 이렇게 만들어주면 좋다
Hook에서 Hook으로 정보 전달 가능.

useState : 이전값을 인자로(prev) / 초기화 지연 레이지 이니셜라이즈(set 값을 함수로)

useEffect : 의존성 배열, 안주거나 빈배열을 줄 수도 있음

useLayoutEffect : useEffect와 유사하나 모든 DOM변경 후 브라우저가 화면을 그리기 이전 시점에 동기적으로 수행된다.

useReducer : useState의 상위호환 state / redcuer / action 

useRef : current라는 상자. 내용의 변경을 알려주지는 않기때문에 콜백Ref 사용해야 함


4. 중간정리(1)

Hooks 등장 -> Class의 단점 보완 / 재사용성 강화
사용규칙 -> 최상위에서 호출, 함수형 컴포넌트에서만 쓴다
Class의 State -> 그냥 이런게 있구나 정도만 알고 Hooks를 쓰자

useEffect -> 데이터 fetch,구독,DOM수정등 사이드 이펙트를 다룰때 쓴다.
클린 업 -> 구독과 구독 해지,셋인터벌,클리어 등을 한 공간에서 할 수 있게 함
dependency array -> 의존성 배열을 줘서 의도대로 실행 가능

CustomHook -> 반복되는 Hooks를 하나로 묶어줄 수 있다.

한국어 공식문서는 접근성은 좋지만 저자의 의도를 놓치거나 하는 경우가 있을 수 있음
원어로 보는것이 중요하다(번역기를 사용하더라도)