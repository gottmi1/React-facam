1. 리액트 기본

1)컴포넌트 -> 엘리먼트의 집합

생긴거

const component = () => {
  return <>
    <button value="1"/>
    <input />
  </>
}
<> <-- 빈 소괄호는 fragment인데 한 컴포넌트에는 반드시 하나의 root요소를 가져야하기 때문에 만들어주는 거. <div></div>이걸로 해도 되지만 그렇게 되면 중첩될수록 쓸데없이 렌더되는 요소의 수가 많아져서 안 씀.

2)useState -> 상태(State)를 관리해주는 hook(리액트의 라이브러리같은 것)
useState는 두개의 값을 구조분해할당하는데, [a,setA] = useState() 로 하는 것이 관행이며 첫번째 인자는 현재 값(현재의 상태, useState()괄호 안에 들어간 거. setState의 최초값이기도 함.)이고, 두번째 값은 그 값을 교체해 렌더해주는 함수이다.



2.컴포넌트의 사이드 이펙트

1)사이드 이펙트 -> 부수효과를 의도적으로 낼때 사용

2)useState는 lazy initalize를 할 수 있다.
useState() <-- 이 괄호안에 함수를 넣어주는 형식
왜 쓰는가? 무언가 가져와야 하는 값이 있는데 딜레이가 있을 수 있는 경우, 그 딜레이 후에 동작하도록 해줌(안정성↑)

3)useEffect의 dipendency array
두번째 인자로 오는 배열
아예 안 쓰면 모든 동작에서 실행(express.use와 같음)
[] 이면 처음 렌더될 때 한번만 실행
[abcd] 이면 abcd의 상태에 변화가 생겼을 때마다 실행된다.


3. 커스텀 훅 만들기

1)반복

useState나 useEffect등이 같은 요소의 상태변화로 실행될 때 비슷한 코드의 반복이 일어날 수 있음. 그 둘을 묶어서 한 함수로 만들어 쓰면 더 보기 편하다 재사용할 수 있는 것도 장점.
이름 짓는 관행 : useName 이런식으로 hook임을 나타내는 use를 사용하고 뒤에 이름은 아무거나 카멜케이스로 작성.


4. hook flow

1)hook들의 호출 타이밍
app 렌더 -> child렌더 -> app 클린업(최초 실행 후) -> child 클린업(최초 실행 후) -> child 이펙트 -> app 이펙트 순서로 동작됨
여러번 해봐야할듯

2)useState의 이전 값
최초에 setState에 지정되어 있는 상태를 setState(prev => {return !prev}) 이런식으로 불러올 수 있다. 위의 예를 든 함수는 불린형태를 계속 바꿔주는 함수

3) useEffect

렌더가 끝난 후 시작
app보다 children의 이펙트가 먼저 실행 됨.

4)update시 (useEffect의 클린업)

useEffect에는 return으로 클린업 함수를 실행 가능함
update할 때 effect의 첫 실행 전에는 실행되지 않다가, 처음 실행 된 후부터는 effect보다 먼저 실행됨



5. 리액트 엘리먼트에 스타일 입히기

1) className => 문자열
/
2) style props => 카멜케이스
className보다 강하게 적용됨


6. useRef로 DOM다루기
바닐라js에선 document... 로 접근하는데 도큐먼트에 직접 접근하는건 효율이 좋지 못함
그래서 리액트에선 useRef 기능을 제공한다.

개발에서의reference는 특정 이름이 적힌 사물함,공간 정도로 많이 사용하는데, 뭔가 독립적인 요소를 주고 싶을 때 사용한다.
<div ref={divRef} />
이런 애가 있을 때

divRef = useRef.current로 접근할 수 있다

7. Form

0) console.dir(element)
event.target.elements에 들어간 값을 dir로 구조를 확인할 수 있다.

1) validation체크는 onChange에서 하는게 좀 더 편한다
2) controlled 
input의 value를 직접 관리(예를 들어 value={number}) 이런식 value를 직접 주지 않으면 uncontrolled라고 부름

8. 에러

1)ErrorBoundary

react가 컴포넌트를 그릴수 없는 상황에서 에러를 핸들링할 수 있는 방법

ErrorBoundary가 필요한데, 이걸로 자식 요소를 감싸면 try catch문 처럼 에러를 밖으로 전파될 수 업도록 막아주고 핸들링할 수 있게 해는 컴포넌트다. 
클래스형 컴포넌트로 만들어야 하는데 이유는 getDerivedStateFromError메서드가 클래스 컴포넌트에만 있기 떄문이다

class ErrorBoundary extend component {
  state = { error :null },
  static getDerivedStateFromError(error) {
    return {error};
  }
  
  // class 컴포넌트는 render함수를 따로 가짐
  render() {
    const {error} = this.state;
    if (error) {
      return <p>에러123</p>
    }

    return this.props.children;
  }
}
이런 컴포넌트를 만든 뒤 아래처럼 에러가 날 수도 있는 자식 컴포넌트를 감싸주면
<ErrorBoundary>
  <Child />
</ErrorBoundary>

Child에 throw error로 에러를 만들었을 때 110번 줄의 p태그로 감싼 요소가 Child대신 뜬다

2) fallback

아니면 <ErrorBoundary>를 <ErrorBoundary fallback={<p>!에러!</p>}> 으로 바꾸고
101번 줄을 return this.props.fallback;으로 바꿔서 값을 편하게 주는 방법도 있음
ErrorBoundary 내부에 
const abcd() {
  <p>{error.message}</p>
}
라는 함수를 만들어서 fallback={abcd}이런식으로 줄 수도 있다
 
요약 : 에러가 날수도 있는 자식요소를 ErrorBoundary로 감싸주면 에러가 났을 때 터지는 대신 해당 자식요소를 대체할 fallback을 그려준다. 그 외엔 똑같이 잘 렌더됨.


9. key와 밸류

1)key는 value를 특정하는 이름(고유함)이다
DB, Dictionary, Json, Object에서 주로 볼 수 있음.

2) 재사용 하려면 key값을 제대로 줘야한다. index값을 key로 주는 건 비효율적임

3) 제대로 준다는 것은? => 중복이 없고 바뀌지 않는 값. index는 중복은 없지만 가변적임


10. 상태 끌어올리기

1) 현재 컴포넌트의 상태(State)가 궁금할 때 -> 필요하면 lifting up(끌어올리기)

2) props drilling -> 과도한 끌어올리기(부모까지 거치는 단계가 너무 많은 상태)는 drilling(상태를 관리할 자식까지 파고드는데 단계가 많은 현상. 끌어올리기의 반대 개념)을 발생시킬 수 있음.. 과도하다 싶으면 useContext등 다른 hook을 사용하는 게 좋다